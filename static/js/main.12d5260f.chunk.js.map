{"version":3,"sources":["ButtonsPanel.js","Step.js","Counter.js","Heading.js","App.js","serviceWorker.js","index.js"],"names":["ButtonsPanel","props","react_default","a","createElement","className","onClick","changeCounterValue","resetCounterValue","Step","type","min","defaultValue","onChange","setNumber","Counter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeNumber","number","state","numberValue","setState","prevState","initValue","reset","setNumberTo","event","valueNum","target","value","vallueNumber","Number","console","log","src_ButtonsPanel","src_Step","Component","Heading","class","title","App","src_Heading","src_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAmBeA,QAhBM,SAACC,GAErB,OACDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAGbH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,EAAMM,oBAAvB,2BACAL,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAKL,EAAMO,mBAAkB,KAA9C,6BACAN,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAKL,EAAMO,mBAAkB,KAA9C,wCCCaC,EATF,SAACR,GAEb,OAAOC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,SAASC,IAAI,IAAIC,aAAa,IAAIC,SAAUZ,EAAMa,cCyD5DC,cApDd,SAAAA,EAAYd,GAAM,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMlB,KAOPsB,aAAe,WACd,IAAIC,EAASR,EAAKS,MAAMC,YACxBV,EAAKW,SAAS,SAACC,GACd,MAAO,CAACC,UAAWD,EAAUC,UAAUL,MAXvBR,EAelBc,MAAQ,SAACA,GACLA,EACFd,EAAKW,SAAS,CAACE,UAAW,IAE1Bb,EAAKW,SAAS,CAACE,UAAWb,EAAKf,MAAM4B,aAnBrBb,EAwBlBe,YAAc,SAACC,GACd,IAAIC,EAAWD,EAAME,OAAOC,MACxBC,EAAeC,OAAOJ,GAC1BK,QAAQC,IAAIN,GACRA,GAAY,EAChBjB,EAAKW,SAAS,CAACD,YAAaU,IAE5BpB,EAAKW,SAAS,CAACD,YAAa,KA7B5BV,EAAKS,MAAQ,CACZI,UAAWb,EAAKf,MAAM4B,UACtBH,YAAa,GAJGV,wEAqChB,OACDd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,UADD,YAEoBe,KAAKM,MAAMI,UAF/B,IAGC3B,EAAAC,EAAAC,cAAA,UACSF,EAAAC,EAAAC,cAACoC,EAAD,CACFjC,mBAAoBY,KAAKI,aACzBf,kBAAmBW,KAAKW,QACtB5B,EAAAC,EAAAC,cAAA,UACNF,EAAAC,EAAAC,cAACqC,EAAD,CAAM3B,UAAWK,KAAKY,sBA/CNW,aCAPC,EAPC,SAAC1C,GAGb,OADAqC,QAAQC,IAAItC,GACHC,EAAAC,EAAAC,cAAA,MAAIC,UAAWJ,EAAM2C,OAAQ3C,EAAM4C,MAAnC,OCqBEC,mLAjBP,OAAS5C,EAAAC,EAAAC,cAAA,OAAMC,UAAY,OACvBH,EAAAC,EAAAC,cAAA,UAAQC,UAAY,cACpBH,EAAAC,EAAAC,cAAC2C,EAAD,CAASF,MAAM,+BAA+BD,MAAM,iBAKpD1C,EAAAC,EAAAC,cAAC4C,EAAD,CAASnB,UAAW,cAXda,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.12d5260f.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst ButtonsPanel = (props) => {\n\t\n\treturn (\n<div className=\"buttonsPanel\">\n\t\t\t\n\t\t\n\t\t<button onClick={props.changeCounterValue} >Dodaj wartość</button>\n\t\t<button onClick={()=>{props.resetCounterValue(true)}}>Resetuj wartość</button>\n\t\t<button onClick={()=>{props.resetCounterValue(false)}}>Wartość początkowa</button>\n\n\n\n</div>);\n\t\t\t\n}\n\nexport default ButtonsPanel;","import React from 'react';\n\n\nconst Step = (props) => {\n\t\n\treturn <div><input type=\"number\" min=\"1\" defaultValue=\"1\" onChange={props.setNumber}/></div>; \n}\n\n\n\n\n\nexport default Step;","import React,{Component} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nimport ButtonsPanel from './ButtonsPanel';\nimport Step from './Step';\n\n\n\nclass Counter extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinitValue: this.props.initValue,\n\t\t\tnumberValue: 1,\n\t\t}\n\t}\n\n\tchangeNumber = () =>{ \n\t\tlet number = this.state.numberValue;\n\t\tthis.setState((prevState)=>{\n\t\t\treturn({initValue: prevState.initValue+number});\n\t\t});\n\t}\n\n\treset = (reset) => {\n\t\tif(reset){\n\t\t\tthis.setState({initValue: 0});\n\t\t}else{\n\t\t\tthis.setState({initValue: this.props.initValue});\n\t\t}\n\t}\n\t\n\t \n\tsetNumberTo = (event) => {\n\t\tlet valueNum = event.target.value;\n\t\tlet vallueNumber = Number(valueNum);\n\t\tconsole.log(valueNum);\n\t\tif (valueNum >= 1){\n\t\tthis.setState({numberValue: vallueNumber});\n\t}  else {\n\t\tthis.setState({numberValue: 1})\n\t}\n}\t \n\t \n\trender(){\n\t\t\n\t  return (\n\t\t<div className=\"counter\">\n\t\t\t<p></p>\n            Licznik: {this.state.initValue};\n\t\t\t<p></p>\n            <ButtonsPanel \n\t\t        changeCounterValue={this.changeNumber} \n\t\t        resetCounterValue={this.reset} />\n            <p></p>\n\t\t    <Step setNumber={this.setNumberTo}/>\n\t\t</div>\n\t  );\n\t}\n}\n\nexport default Counter;\n","import React from 'react';\n\nconst Heading = (props) => {\n\n    console.log(props)\n    return ( <h1 className={props.class}>{props.title}  </h1>);\n\n}\n\nexport default Heading;","import React, { Component } from 'react';\nimport './App.css';\nimport Counter from './Counter';\nimport Heading from './Heading';\n\nclass App extends Component {\n\n    render() {\n\n        return ( < div className = \"App\" >\n            <header className = \"App-header\" >\n            <Heading title=\"Aplikacja licznika w ReactJS\" class=\"mainHeading\"/>\n       \n            </header >\n\n           \n            <Counter initValue={1000}/>\n\n            </div >\n        );\n    }\n\n\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}